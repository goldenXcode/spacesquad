/*
	Steering Behaviors Applet

    Copyright (C) 2001	Thomas Feilkas 			
    			Christian Schnellhammer

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
	
	For further questions contact us at:
		CSchnell@Gmx.de
		TFeilkas@Gmx.de
	
*/

package de.steeringbehaviors.applet;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Iterator;
import java.util.Vector;

import de.steeringbehaviors.simulation.renderer.RenderInfo;
import de.steeringbehaviors.simulation.renderer.SteeringRenderer;
import de.steeringbehaviors.simulation.simulationobjects.Neighborhood;
import de.steeringbehaviors.simulation.simulationobjects.Obstacle;
import de.steeringbehaviors.simulation.simulationobjects.Simulation;
import de.steeringbehaviors.simulation.simulationobjects.TileNeighborhood;
import de.steeringbehaviors.simulation.simulationobjects.Vehicle;
import de.steeringbehaviors.simulation.simulationobjects.VehicleInfoSimulation;
import de.steeringbehaviors.simulation.xml.SteeringFactory;


public class TileTestingApplet extends java.applet.Applet implements Runnable
{
	public void init()
	{
		// Take out this line if you don't use symantec.itools.net.RelativeURL or symantec.itools.awt.util.StatusScroller
		//symantec.itools.lang.Context.setApplet(this);
	
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setSize(640,480);
		EastPanel.setLayout(new BorderLayout(0,0));
		add(BorderLayout.EAST, EastPanel);
		EastPanel.setBackground(java.awt.Color.lightGray);
		EastPanel.add(BorderLayout.CENTER, InfoCanvas);
		lbl_InfoHeading.setText("Vehicle Info:");
		EastPanel.add(BorderLayout.NORTH, lbl_InfoHeading);
		CenterPanel.setLayout(new GridLayout(1,1,0,0));
		add(BorderLayout.CENTER, CenterPanel);
		CenterPanel.add(canvas1);
		SouthPanel.setLayout(new GridLayout(2,2,0,0));
		add(BorderLayout.SOUTH, SouthPanel);
		SouthPanel.setBackground(java.awt.Color.lightGray);
		SimulationPanel.setLayout(new GridLayout(1,1,0,0));
		SouthPanel.add(SimulationPanel);
		Start.setLabel("Start");
		SimulationPanel.add(Start);
		Reset.setLabel("Reset");
		SimulationPanel.add(Reset);
		FilePanel.setLayout(new GridLayout(1,1,0,0));
		SouthPanel.add(FilePanel);
		m_openButton.setLabel("Open Project...");
		FilePanel.add(m_openButton);
		m_openButton.setBackground(java.awt.Color.lightGray);
		MousePanel.setLayout(new GridLayout(1,1,0,0));
		SouthPanel.add(MousePanel);
		Select.setCheckboxGroup(Group1);
		Select.setState(true);
		Select.setLabel("Select");
		MousePanel.add(Select);
		Pann.setCheckboxGroup(Group1);
		Pann.setLabel("Pann");
		MousePanel.add(Pann);
		Zoom.setCheckboxGroup(Group1);
		Zoom.setLabel("Zoom");
		MousePanel.add(Zoom);
		RenderPanel.setLayout(new GridLayout(1,1,0,0));
		SouthPanel.add(RenderPanel);
		chk_showGrid.setState(true);
		chk_showGrid.setLabel("Show Grid");
		RenderPanel.add(chk_showGrid);
		chk_freePann.setLabel("Free Pann");
		RenderPanel.add(chk_freePann);
		//}}
		
//		canvas1.addMouseListener(new MyMouseClickListener());
//        canvas1.addMouseMotionListener(new MyMouseMotioListener());
        
        initObjects();
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		Start.addActionListener(lSymAction);
		Reset.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		Select.addItemListener(lSymItem);
		Pann.addItemListener(lSymItem);
		Zoom.addItemListener(lSymItem);
		chk_showGrid.addItemListener(lSymItem);
		chk_freePann.addItemListener(lSymItem);
		SymMouseMotion aSymMouseMotion = new SymMouseMotion();
		canvas1.addMouseMotionListener(aSymMouseMotion);
		SymMouse aSymMouse = new SymMouse();
		canvas1.addMouseListener(aSymMouse);
		m_openButton.addActionListener(lSymAction);
		//}}
	}
	
	public void destroy()
    {
        running = false;
        
        // Kurz Warten, damit der Thread auch beendet wird, 
        // bevor der DoubleBuffer gelöscht wurde
        while (theThread != null)
        {
            try
            {
                Thread.sleep(80);
            }
            catch(InterruptedException e) {}        
        }
    		//{{CLEANUP
		//}}
	}
	
	
	private void initObjects()
    {
    	//
    	// Create system objects
    	//
    	
        m_Renderer = new SteeringRenderer(640, 400);
        
        m_infoRenderer = new SteeringRenderer(100, 400);
        
		m_Simulation = new Simulation();

		m_vehicleInfo = new VehicleInfoSimulation();

		//
        // Create the initial doublebuffers 
        //
        
        m_buffer = createImage( (int) getBounds().getWidth(), (int) getBounds().getHeight() );
        m_db = m_buffer.getGraphics();                

		m_infoBuffer = createImage( (int) getBounds().getWidth(), (int) getBounds().getHeight() );
		m_infoGraphics = m_infoBuffer.getGraphics();
		
        //
        // Load the special cursor images
        //

        Image cursIm = getImage(getCodeBase(), "ScrollKreuz.gif");        
//        scrollCurs = getToolkit().createCustomCursor(cursIm, new Point(25, 25), "Scroll");
                                                      
        
        SteeringFactory factory = new SteeringFactory(this);
        factory.createScene(getCodeBase()+ m_project);                
        
        m_Simulation.setSceneWidth(factory.getSceneWidth());
        m_Simulation.setSceneHeight(factory.getSceneHeight());
        
        // Set the background for the simulation
        m_Simulation.addBackground(factory.getBackground());                
        
        m_Renderer.setSceneWidth(factory.getSceneWidth());
        m_Renderer.setSceneHeight(factory.getSceneHeight());
        
        Vector vlist = new Vector();
        vlist = factory.getVehicles();
        Iterator i = vlist.iterator();
        while (i.hasNext())
        {
        	m_Simulation.addVehicle((Vehicle) i.next());
        }
        
        Vector olist = new Vector();
        olist = factory.getObstacles();
        i = olist.iterator();
        while (i.hasNext())
        {
        	m_Simulation.addObstacle((Obstacle) i.next());
        }
        System.out.println("No Veh: "+vlist.size());  
        
        m_tn = new TileNeighborhood();
        //m_Simulation.addPreSimulation(m_tn);
        m_Simulation.addPreSimulation(new Neighborhood());
        m_Simulation.addPostSimulation(m_vehicleInfo);                                
        
        // Set the grid state
        m_Renderer.setShowGrid(chk_showGrid.getState());
        
        // Set the tracking state
        m_vehicleInfo.setTrackedVehicle(null);
        
        //
		// Start the simulation thread
		// 
		
        if (theThread == null)
        {
            theThread = new Thread(this);
            running = true;
            theThread.start();
        }         
    }
		
		
	public void run()
    {        
        while (running)
        {           	        	                 	        	
			// 
			// Simluation code goes here
			//
            if (!m_paused) m_Simulation.runSimulation();    
                        
            //
            // Repaint code
            //
            
            repaint(); 
            
            //
            // Use a fixed time step for the simulation
            //
                        
            m_oldTime = m_Simulation.getSimulationTime();

            if (m_oldTime > 0)
                m_frames = (int) (1000 / m_oldTime);
            else
                m_frames = -1;

			// Simulation auf max. 25 Frames/s reduzieren
            int sleep = (int) (40 - m_oldTime);
            if (sleep < 0) sleep = 0;
            
            try
			{
            	Thread.sleep(sleep);
            }
            catch(InterruptedException e) {}
            
        }
        theThread = null;
    }
    
    
    public void update(Graphics g)
    {

        int sizeX = canvas1.getSize().width;
        int sizeY = canvas1.getSize().height;

		//
        // Doublebuffer auf Fenstergrösse anpassen
        //
        if (m_buffer.getWidth(null) != sizeX || m_buffer.getHeight(null) != sizeY)
        {

            if (sizeX <= 0) sizeX = 1;
            if (sizeY <= 0) sizeY = 1;
            
            m_buffer = createImage(sizeX,sizeY);
            m_db = m_buffer.getGraphics();

            m_Renderer.setScreenWidth(sizeX);
            m_Renderer.setScreenHeight(sizeY);
        }
        else
        {
            m_db.setColor(Color.lightGray);
            m_db.clearRect(0, 0, m_buffer.getWidth(null), m_buffer.getHeight(null));
        }

		//
		// Scale the secondary doublebuffer to fit to the canvas
		//
		sizeX = InfoCanvas.getSize().width;
		sizeY = InfoCanvas.getSize().height;
		
		if (m_infoBuffer.getWidth(null) != sizeX || m_infoBuffer.getHeight(null) != sizeY)
		{
			if (sizeX <= 0) sizeX = 1;
            if (sizeY <= 0) sizeY = 1;
            
            m_infoBuffer = createImage(sizeX,sizeY);
            m_infoGraphics = m_infoBuffer.getGraphics();

            m_infoRenderer.setScreenWidth(sizeX);
            m_infoRenderer.setScreenHeight(sizeY);	
		}
		else
		{
			m_infoGraphics.setColor(Color.lightGray);
			m_infoGraphics.clearRect(0, 0, sizeX, sizeY);
		}

		//
		// Paint all the scenes
		//

        paint(m_db);
        
        //
        // Draw the doublebuffers in one go
        // 
        
        canvas1.getGraphics().drawImage(m_buffer, 0, 0, this);

        InfoCanvas.getGraphics().drawImage(m_infoBuffer, 0, 0, this);

    }

    public void paint (Graphics g)
    {        
    	
    	TileNeighborhood.TileInformation info;
    	// Draw the Tileneighborhood first
    	/*
    	g.setColor(Color.orange);
    	
    	for (int y = 0; y < m_tn.m_tilesY; y++)
    	{
    		for (int x = 0; x < m_tn.m_tilesX; x++)
    		{
    			info = (TileNeighborhood.TileInformation) m_tn.m_tiles.elementAt(y * m_tn.m_tilesX + x);
    			if (!info.m_accessible)
    			{
    				g.fillRect((int) (x * m_tn.m_tilesizeX), (int) (y * m_tn.m_tilesizeY),(int) m_tn.m_tilesizeX, (int) m_tn.m_tilesizeY);
    			}
    		}
    	}
    	g.setColor(Color.white);
    	*/
        Iterator it = m_Simulation.getScene().iterator();

        m_Renderer.renderScene(it, g);       	
        
        // Render the behavior information
        it = m_vehicleInfo.getScene().iterator();
        
        m_infoRenderer.renderScene(it, m_infoGraphics);
        
        // Draw the transformed mouse coordinates into the left upper corner
        g.setColor(Color.black);
        g.drawString("Mouse: " + m_Renderer.screenToWorldX(m_mouseX) + ", " + m_Renderer.screenToWorldY(m_mouseY), 10, 10);        
        
    }
	
	
	//{{DECLARE_CONTROLS
	java.awt.Panel EastPanel = new java.awt.Panel();
	java.awt.Canvas InfoCanvas = new java.awt.Canvas();
	java.awt.Label lbl_InfoHeading = new java.awt.Label();
	java.awt.Panel CenterPanel = new java.awt.Panel();
	java.awt.Canvas canvas1 = new java.awt.Canvas();
	java.awt.Panel SouthPanel = new java.awt.Panel();
	java.awt.Panel SimulationPanel = new java.awt.Panel();
	java.awt.Button Start = new java.awt.Button();
	java.awt.Button Reset = new java.awt.Button();
	java.awt.Panel FilePanel = new java.awt.Panel();
	java.awt.Button m_openButton = new java.awt.Button();
	java.awt.Panel MousePanel = new java.awt.Panel();
	java.awt.Checkbox Select = new java.awt.Checkbox();
	java.awt.CheckboxGroup Group1 = new java.awt.CheckboxGroup();
	java.awt.Checkbox Pann = new java.awt.Checkbox();
	java.awt.Checkbox Zoom = new java.awt.Checkbox();
	java.awt.Panel RenderPanel = new java.awt.Panel();
	java.awt.Checkbox chk_showGrid = new java.awt.Checkbox();
	java.awt.Checkbox chk_freePann = new java.awt.Checkbox();
	//}}
	
	/** The mouse state for selecting objects */
	public static final int STATE_SELECT = 0;
	/** The mouse state for panning the view */
    public static final int STATE_PANN = 1;
    /** The mouse state for zooming in and out of the view */
    public static final int STATE_ZOOM = 2;
	
	/** This image object is used for the double buffer of the main canvas*/
	private Image				m_buffer = null;
	/** Direct acces to the graphics object of the image for the double buffer */
    private Graphics			m_db = null;	
	/** The current number of frames per second*/
	private int 				m_frames = 25;
	/** The renderer for the vehicle information scene */
	private SteeringRenderer	m_infoRenderer = null;
	/** The image object for the second double buffer. It is used to reduce the flickering in the behvaior info canvas. */
	private Image				m_infoBuffer = null;
	/** Direct access to the secondary double buffer. */
	private Graphics			m_infoGraphics = null;
	/** The state of the mouse. This can be pann mode, zoom mode or selction mode. */
    private int 				m_mouseState = STATE_SELECT;
    /** The current x position of the mouse in canvas relative coordinates */
	private int 				m_mouseX;
	/** The current y position of the mouse in canvas relative coordinates */
    private int 				m_mouseY;
    /** The time used for simulating and rendering the last frame */
	private long				m_oldTime = 0;
	/** The dialog used for opening new project files. */
	private OpenXmlDlg			m_openDialog = null;
	/** Used to switch between the paused and non-paused state of the simulation */
	private boolean				m_paused = true;
	/** The name of the project file. Default value is "test.xml" */
	private String				m_project = "test.xml";
	/** The SteeringRenderer used for drawing the main simulation */
    private SteeringRenderer 	m_Renderer = null;
    /** This flag is used to control the lifetime of the secondary thread. */
	private boolean 			running = false;		
	/** The main Simulation class. It runs the complete simulation for every frame. */
	private Simulation			m_Simulation = null;
	/** Frame object used as parent for the dialogs. */
	private Frame				m_theFrame = new Frame();
	/** The secondary thread used for updating the screen in predefined intervalls */
	private Thread				theThread = null;        
	/** The tile based neighborhood object used for spatial queries. */
	private	TileNeighborhood	m_tn = null;
	/** The VehicleInformation class used to create the scene with the information about the behaviors on a vehicle */
	private VehicleInfoSimulation m_vehicleInfo = null;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == Start)
				Start_ActionPerformed(event);
			else if (object == Reset)
				Reset_ActionPerformed(event);
			else if (object == m_openButton)
				mOpenButton_ActionPerformed(event);
		}
	}

	void Start_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		if (m_paused)
		{
			Start.setLabel("Pause");
		}
		else
		{
			Start.setLabel("Start");	
		}
		
		m_paused = !m_paused;
	}

	/**
	 * 
	 */
	void Reset_ActionPerformed(java.awt.event.ActionEvent event)
	{
		boolean tmp = m_paused;
		m_paused = true;
			 
		initObjects();
			 
		m_paused = tmp;
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == Select)
				Select_ItemStateChanged(event);
			else if (object == Pann)
				Pann_ItemStateChanged(event);
			else if (object == Zoom)
				Zoom_ItemStateChanged(event);
			else if (object == chk_showGrid)
				chkShowGrid_ItemStateChanged(event);
			else if (object == chk_freePann)
				chkFreePann_ItemStateChanged(event);
		}
	}

	void Select_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		m_mouseState = STATE_SELECT;			 
	}

	void Pann_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		m_mouseState = STATE_PANN;			 
	}

	void Zoom_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		m_mouseState = STATE_ZOOM;
	}

	void chkShowGrid_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		
		m_Renderer.setShowGrid(chk_showGrid.getState());		
	}

	void chkFreePann_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		m_Renderer.setAllowFreePann(chk_freePann.getState());			 
	}

	class SymMouseMotion extends java.awt.event.MouseMotionAdapter
	{
		public void mouseMoved(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == canvas1)
				canvas1_MouseMoved(event);
		}

		public void mouseDragged(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == canvas1)
				canvas1_MouseDragged(event);
		}
	}

	void canvas1_MouseDragged(java.awt.event.MouseEvent event)
	{
		if (event.getModifiers() == event.BUTTON1_MASK)            
        {
        	if (m_mouseState == STATE_ZOOM)
            {
				// Zoom in / out
				double zoom = m_Renderer.getZoom();
				double relZoom;
				int relY = event.getY() - m_mouseY;
				                                        
				relZoom= 0.1 * (-relY / 10);
				                    
				zoom += relZoom;
				                    
				m_Renderer.setZoom(zoom);
            }
            else if (m_mouseState == STATE_PANN)
            {
				// Pann the viewing rectangle
				int relX = m_Renderer.getRelX();
				int relY = m_Renderer.getRelY();
				                
				relX -= (int) ((event.getX() - m_mouseX) / m_Renderer.getZoom());
				relY -= (int) ((event.getY() - m_mouseY) / m_Renderer.getZoom());
				                
				m_Renderer.setRelX(relX);
				m_Renderer.setRelY(relY);                                    
            }
                
			// In all cases: Update the last position
			m_mouseX = event.getX();
			m_mouseY = event.getY();
		}			 
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mousePressed(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == canvas1)
				canvas1_MousePressed(event);
		}
	}

	void canvas1_MousePressed(java.awt.event.MouseEvent event)
	{
		// In all cases: Update the last position
		m_mouseX = event.getX();
		m_mouseY = event.getY();
		
		if (m_mouseState == STATE_SELECT)
		{
			Vector objects = m_Renderer.getVisibleObjects(m_mouseX, m_mouseY);
			if (objects.isEmpty())
			{				
				m_vehicleInfo.setTrackedVehicle(null);
			}
			else
			{
				RenderInfo info = (RenderInfo) objects.firstElement();
				try
				{
					Vehicle v = (Vehicle) info.getParent();
					m_vehicleInfo.setTrackedVehicle(v);
				}
				catch (ClassCastException c)
				{
					m_vehicleInfo.setTrackedVehicle(null);	
				}
			}
		}
	}

	void canvas1_MouseMoved(java.awt.event.MouseEvent event)
	{
		// In all cases: Update the last position
		m_mouseX = event.getX();
		m_mouseY = event.getY(); 
	}

	/**
	 * Event handler for the ActionPerformed event on the open button.
	 * It reads all xml files in the current directory and displays
	 * them in a separate dialog window.
	 */
	void mOpenButton_ActionPerformed(java.awt.event.ActionEvent event)
	{		
		java.net.URL URLpath = getCodeBase();
		
		boolean temp = m_paused;
		m_paused = true;
		
		// Give the simulation thread some time to get stopped...
		try
        {
            Thread.sleep(400);
        }
        catch(InterruptedException e) {}  
		
		if (m_openDialog == null)
		{
			m_openDialog = new OpenXmlDlg(m_theFrame);	
		}
		
		m_openDialog.setModal(true);
		m_openDialog.getList().removeAll();
		
		String str = "---";
		String path = URLpath.toString() + "/projects.txt";		
		try
		{
			URL url = new URL(path);
			
			try
			{
				try
				{
					BufferedReader br = new BufferedReader (new InputStreamReader(url.openStream()));
					while ((str=br.readLine())!=null) 
					{
						m_openDialog.getList().add(str);
						System.out.println(str);
					}
				}
				catch (NullPointerException npe)
				{}
			}
			catch (IOException ioe)
			{
				System.out.println("IOException while reading the project list");	
			}
		}
		catch (MalformedURLException mle)
		{
			System.out.println("Invalid URL!");	
		}
		m_openDialog.show();
		
		str = m_openDialog.m_projectName;
		
		System.out.println("Selected: " + str);
		
		// If a new project has been selected, load it
		if (str.compareTo("") != 0)
		{
			m_project = str;												
			initObjects();						
		}
		m_paused = temp;
	}
}
